![image.png](https://pic.leetcode-cn.com/1645881641-PeNJNn-image.png)

### 1.基本思路，排序后统计

* 

```
class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        if(nums.length == 0) return 0;

        int ans = 1, curLen = 1;
        //来到比前一个位置值>1的位置，或来到最后一个位置时，记录结果，开始新的起点
        for(int i = 0;i <= nums.length; ++i){
            if(i == 0 || i == nums.length || nums[i] > nums[i-1] + 1 ){
                ans = Math.max(ans, curLen);
                curLen = 1;
            }else if(nums[i] == nums[i-1] + 1){
                ++curLen;
            }
        }

        return ans;
    }
}
```

### 2.遍历一遍数组，将所有元素放到set

- 通过hash可以以O(1)判断一个数字+1,-1的相邻数字是否在数组中存在

* 

```
class Solution {
    public int longestConsecutive(int[] nums) {
     
        int ans = 0;
        Set<Integer> set = new HashSet<>();
        for(int i = 0;i < nums.length; ++i){
            set.add(nums[i]);
        }

        while(!set.isEmpty()){
            int temp = 1;
            Integer cur = set.iterator().next();
            set.remove(cur);
            
            //往左右找
            int l = cur - 1;
            while(set.contains(l)){
                ++temp;
                set.remove(l);
                --l;
            }
            int r = cur + 1;
            while(set.contains(r)){
                ++temp;
                set.remove(r);
                ++r;
            }
            ans = Math.max(temp,ans);
        }
        return ans;
    }
}
```

### 3.上一种解法的继续优化

- 有set的话直接可以根据：当前数字是否有比它小的值判断是否某个连续序列起点
- 只从起点元素开始在set中寻找，且因为确认了起点，不需要从set中remove确认过的元素

* 

```
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(int num : nums){
            set.add(num);
        }
        int ans = 0;
        //注意这里【必须】用set遍历，因为如果nums中重复元素多会造成耗时高
        for(int cur : set){
            //找到每个连续序列的最小值
            if(!set.contains(cur - 1)){
                int temp = cur, cnt = 0;
                while(set.contains(temp)){
                    ++temp;
                    ++cnt;
                }
                ans = Math.max(cnt,ans);
            }
        }

        return ans;
    }
}
```

### 4.并查集变种

- 利用并查集可以将相同属性的元素归为一类联通的特性，将连续数字联通为一类
- 变种1：因为有重复元素，用map来替代数组
- 变种2：初始化时需要预处理，将所有元素尝试与比它大1的元素相连

* 

```
class Solution {
    public int longestConsecutive(int[] nums) {
        //并查集，连续数字可以分类为一组，father节点可以用最大值表示
        //最后遍历一遍并查集，找到key和val差距最大的那个
        UnionFind uf = new UnionFind(nums);
        return uf.getMaxDistance();
    
    }

    class UnionFind{
        Map<Integer, Integer> map = new HashMap<>();
        UnionFind(int[] nums){
            //因为有重复数字，用map代替数组来标识元素和其father值
            for(int i = 0;i < nums.length; ++i){
                map.put(nums[i],nums[i]);
            }
            //将每个key尝试与比它大的值关联
            for(int key : map.keySet()){
                if(map.containsKey(key + 1)){
                    union(key, key + 1);
                }
            }
        }

        //获取key和对应father最大的差距（最大连续长度）
        int getMaxDistance(){
            int ans = 0;
            for(int key : map.keySet()){
                ans = Math.max(ans, findFather(map.get(key)) - key + 1);
            }
            return ans;
        }

        //连接
        void union(int a, int b){
            map.put(a, findFather(b));
        }

        //连续元素必定与其+1大的值相连，因此findFather必定能找到a的右边界
        Integer findFather(int a){
            if(a == map.get(a)) return a;
            map.put(a,findFather(map.get(a)));
            return map.get(a);
        }
        
    }
}
```

